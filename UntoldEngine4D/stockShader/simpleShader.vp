attribute vec4 Vertex;
attribute vec3 Normal;
attribute vec2 TextureCoord;

uniform mat4 MVPMatrix;
uniform mat3 NormalMatrix;
uniform mat4 MVMatrix;
uniform mat4 ModelMatrix;
uniform mat4 LightSpaceMatrix;

uniform vec4 DiffuseMaterialColor;
uniform float ShadowCurrentPass;
varying vec4 shadowCoord;
uniform vec4 PointLight;


varying mediump vec4 light0Position;
varying mediump vec3 normalInViewSpace;
varying mediump vec4 positionInViewSpace;
varying lowp vec4 colorVarying;

varying mediump vec2 vVaryingTexCoords;

void main(void) 
{
    if(ShadowCurrentPass==0.0){

    gl_Position = LightSpaceMatrix*ModelMatrix*Vertex;


    }else{

        vec3 eyeNormal = normalize(NormalMatrix * Normal);
        vec3 lightPosition = vec3(PointLight.xyz);
        vec4 diffuseColor = DiffuseMaterialColor;;
        
        float nDotVP = max(0.0, dot(eyeNormal, normalize(lightPosition)));
                     
        colorVarying = diffuseColor * nDotVP;

        vVaryingTexCoords=TextureCoord;

        shadowCoord=LightSpaceMatrix*ModelMatrix*Vertex;

        normalInViewSpace=NormalMatrix*Normal;

        positionInViewSpace=MVMatrix*Vertex;

        light0Position=MVMatrix*PointLight;

        gl_Position = MVPMatrix * Vertex;

    }
}